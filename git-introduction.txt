==================master branch==========================

在本地的工程(可以是一个空文件夹）进行git操作。
git init --本地工程命令
初始化该工程，生成.git文件夹

git commit -a 
在add前使用该语句，会自动监听文件的变化，add之后，即可直接git commit

git add .--本地工程命令
告之git，你的工程内容的，生成snapshot。该snapshot存在于git的index临时区域

git commit --本地工程命令
将project文件永久的存储到index中




git pull

git pull时注意其他分支的pull， git pull --all



git branch
1.to show all branch we have

2.to create a new branch

note:
Every branch will have a copy of files in that project（root folder).When 
swiching to a new branch, and changes are being made, then after commiting,
files in this branch are different from others branch. Git uses header to 
point differenct branches.

usage:
	---git checkout feature,and make some changes in some files
	---git add.
	---git commit -m "decription"
	---git push origin branchName
note:
if branchName is not in remote repository, then this new branch will be generated and those files having been modified will be send to remote repository.


git branch -a 
1.to list all local and remote branch




=======
================develop branch======================

checkout

1. creating a new branch


2. creating a new branch and switch to new one
usage:
	---git checkout -b branchName
note: 
-b is short for branch



3. retreat modified part of some files
usage:
	---git checkout filename
note:
when git status, some modified files that haven't sent to temporaray area will rollback to original status. Those changes will be removed in this file.


this line is newly added to differ feature branch

	




git show 显示修改内容
git pull origin branch_name
git push origin branch_name  
usage:
    having branch: feature/QMTRIP-25
    git pull origin feature/QMTRIP-25


git ls-files
显示文档目录结构


git rm -f file_name
remove files in temporary local storage。 
usage：
	--git rm -f www/ionic/trip/booking-details.html



git branch -d branch_name
usage:
	--to delete branch


如何复原已删除文件
git reset www/ionic/trip/create_bak.ts

git reset HEAD www/ionic/trip/create_bak.ts




执行tsc可以确定是否本地版本是否存在问题，然后决定是否需要push

  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

